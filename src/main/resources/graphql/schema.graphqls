scalar Object

type Query {
    getEntities(filter: FilterInput): EntityQueryResult!
    getEntityById(entityId: ID!): DynamicEntityDto
    getEntityByName(entityName: String!): DynamicEntityDto
    getEntityInstances(entityName: String!, filter: FilterInput): InstanceQueryResult!
    getEntityInstance(entityName: String!, instanceId: ID!): EntityInstanceDto
}

type Mutation {
    createEntity(input: CreateEntityInput!): DynamicEntityDto!
    updateEntity(input: UpdateEntityInput!): DynamicEntityDto!
    deleteEntity(entityId: ID!): Boolean!
    addAttributeToEntity(entityId: ID!, attribute: AttributeInput!): DynamicEntityDto!
    removeAttributeFromEntity(entityId: ID!, attributeName: String!): DynamicEntityDto!

    createEntityInstance(input: InstanceInput!): EntityInstanceDto!
    updateEntityInstance(input: InstanceInput!): EntityInstanceDto!
    deleteEntityInstance(entityName: String!, instanceId: ID!): Boolean!
}

input CreateEntityInput {
    entityName: String!
    attributes: [AttributeInput!]
}

input UpdateEntityInput {
    entityId: ID!
    entityName: String
}

input AttributeInput {
    name: String!
    type: String!
}

input InstanceInput {
    entityName: String!
    instanceId: ID
    values: Object!
}

input FilterInput {
    entityName: String
    attributeFilters: Object
    limit: Int
    offset: Int
}

type DynamicEntityDto {
    entityId: ID!
    entityName: String!
    attributes: [AttributeDto!]!
}

type AttributeDto {
    attributeId: ID!
    attributeName: String!
    attributeType: String!
}

type EntityInstanceDto {
    instanceId: ID!
    entityName: String!
    values: Object!
    createdAt: String
    updatedAt: String
}

type EntityQueryResult {
    items: [DynamicEntityDto!]!
    totalCount: Int!
    hasNext: Boolean!
}

type InstanceQueryResult {
    items: [EntityInstanceDto!]!
    totalCount: Int!
    hasNext: Boolean!
}